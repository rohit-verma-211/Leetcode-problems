#Question:
Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
Example 2:

Input: nums = [5], k = 9
Output: 0
#Answer:
import java.util.*;

class Solution {
    public static int subarraysDivByK(int[] nums, int n) {
        int subarraycounter = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i; j < nums.length; j++) {
                int sum = 0;  
                for (int k = i; k <= j; k++) {
                    sum += nums[k];
                }
                if (sum % n == 0) {
                    subarraycounter++;  
                }
            }
        }

        return subarraycounter;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the value of n: ");
        int n = sc.nextInt();

        int nums[] = {4, 5, 0, -2, -3, 1};  
        int result = subarraysDivByK(nums, n);  
        System.out.println(result);  
    }
}
