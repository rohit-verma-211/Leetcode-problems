Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
class Solution {
    public static int trap(int[] height) {
        int len = height.length;
        if (len == 0) return 0;

        int left[] = new int[len];
        int right[] = new int[len];
        
        left[0] = height[0];
        for (int i = 1; i < len; i++) {
            left[i] = Math.max(left[i - 1], height[i]);
        }
        
        right[len - 1] = height[len - 1];
        for (int j = len - 2; j >= 0; j--) {
            right[j] = Math.max(right[j + 1], height[j]);
        }
        
        int ans = 0;
        for (int i = 0; i < len; i++) {
            ans += Math.min(left[i], right[i]) - height[i];
        }
        
        return ans;
    }

    public static void main(String[] args) {
        int height[] = {4, 5, 6, 8, 9, 7};
        System.out.println(trap(height));
    }
}
