Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
import java.util.Arrays;

class Solution {
    public static double findMedianSortedArrays(int arr[], int arr1[]) {
        int len = arr.length;
        int len1 = arr1.length;
        int finallen = len + len1;
        int finalArray[] = new int[finallen];

        
        for (int i = 0; i < len; i++) {
            finalArray[i] = arr[i];
        }
        for (int i = 0; i < len1; i++) {
            finalArray[i + len] = arr1[i];
        }

        
        Arrays.sort(finalArray);

        
        double median;
        if (finallen % 2 == 0) {
            
            median = (finalArray[finallen / 2] + finalArray[(finallen / 2) - 1]) / 2.0;
        } else {
            
            median = finalArray[finallen / 2];
        }

        return median;
    }

    public static void main(String[] args) {
        int arr[] = {1,3};
        int arr1[] = {2};
        
        
        double median = findMedianSortedArrays(arr, arr1);
        System.out.println("Median: " + median);
    }
}
